# 使用手册

## 预览

<b>Python Imaging Library（PIL）</b>给你的Python解释器提供了处理图片的能力

PIL提供了对多种格式的图片进行高效且非常强大的处理能力。

PIL的核心库设计之初是为了快速访问常见的图片格式，所以他相对于一般的图片处理程序提供了更强大的功能

我们来看看这个库的一些可能用途。

### 图片存档

PIL一开始是为了图片存档和批处理程序使用。你可以利用PIL进行创建缩略图，转换图片格式，打印图片等操作

而现在的PIl则可以标记和读取多种格式的图片，创建/修改的操作则被故意限制为只支持常用的格式。

### 图片展示

最新的发布版本包含了Tkinter模块的<b>`PhotoImage`</b>和<b>`BitmapImage`</b>接口，以及可以在PythonWin和其他基于Windows的工具包下可以使用的<b>`Windows DIB interface`</b>。

为了方便调试，我们提供了<b>`show()`</b>方法将图片存储之后再调用其他程序将其显示出来。

### 图片处理

PIL提供了图片处理的基础能力，包括点操作，使用一组内置卷积内核进行过滤，以及色彩空间的转换。

同时，它也支持重置图片尺寸、翻转以及任意角度的旋转

有一种柱状图方法可以让你从图像中提取一些统计数据。这可以用于自动增强对比度，并用于全局统计分析。

## 教程

### 使用Image类

PIL中最重要的类就是<b>`Image`</b>类，在模块中也是一样的名字。有很多种方式可以创建<b>`Image`</b>类的实例；比如加载一张图片文件，处理其他图片或者是从0创建一张空白图片。

可以使用<b>`Image`</b>模块中的<b>`open()`</b>方法加载图片文件：

```Python
>>> from PIL import Image
>>> im=Image.open("hopper.ppm")
```

如果读取成功，open方法将会返回一个<b>`Image`</b>对象，现在你可以通过实例的属性来检查文件内容：

```Python
>>> print(im.format,im.size,im.mode)
PPM (512,512) RGB
```

属性<b>`format`</b>标记了文件的源格式，如果图片不是从文件中读取的，那属性就会返回<b>`None`</b>。<b>`size`</b>属性返回的是一个包含了宽高（以像素为单位）的2个元素的元组。<b>`mode`</b>属性定义了图像中波段的数量和名称以及像素的类型和深度，通常情况下，“L”（亮度）表示灰度图，“RGB”表示彩色图，“CMYK”表示预打印图片（印刷色彩模式）。

如果图片打开失败，会抛出<b>`IOError`</b>异常。

一旦你创建了<b>`Image`</b>类的实例，你就可以使用PIL提供的方法来处理图片。比如，显示我们刚才加载的图片：

```Python
>>> im.show()
```

> 标准版本中的<b>`show()`</b>方法效率比较低，因为他要将图片临时保存并且调用应用程序来显示图片。如果你的机器上没有安装可以显示图片的程序，<b>`show()`</b>方法会不起作用。如果可以显示图片，那么就可以极大地提高调试和测试的效率。

以下部分<b>简要的描述</b>了此库中提供的其他功能。

### 图片的读写

#### 将图片转换成JPEG格式
#### 创建JPEG的缩略图
#### 识别图像文件

### 剪切，粘贴，合并图片

#### 从图片中复制子矩形
#### 处理子矩形之后再粘贴回去
#### 翻转图片
#### 颜色的分割与合并

## 概念

## 附录
<b>``</b>